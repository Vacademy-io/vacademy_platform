
spring.application.name=auth_service
## Database Connection
spring.datasource.url=${AUTH_SERVICE_DB_URL}
spring.datasource.password=${DB_PASSWORD}
spring.datasource.username=${DB_USERNAME}
## Security
application.my.username=${APP_USERNAME}
application.my.password=${APP_PASSWORD}
spring.mvc.dispatch-options-request=true
auth.server.baseurl=${AUTH_SERVER_BASE_URL}
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=10MB
logging.level.org.springframework.security=DEBUG
cloud.front.url=${CLOUD_FRONT_URL}
## Logging
org.springframework.boot.actuate.health.Logger=OFF
logging.level.org.springframework.boot.actuate.health=OFF
admin.core.service.base_url=${ADMIN_CORE_SERVICE_BASE_URL}
notification.server.baseurl=${NOTIFICATION_SERVER_BASE_URL}
spring.jpa.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# ==== Google OAuth2 Configuration ====

spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET}
spring.security.oauth2.client.registration.google.scope=openid,profile,email


spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/v2/auth
spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token
spring.security.oauth2.client.provider.google.user-info-uri=https://openidconnect.googleapis.com/v1/userinfo
spring.security.oauth2.client.provider.google.user-name-attribute=sub


# ==== Github OAuth2 Configuration ====


spring.security.oauth2.client.registration.github.client-id=${OAUTH_GITHUB_CLIENT_ID}
spring.security.oauth2.client.registration.github.client-secret=${OAUTH_GITHUB_CLIENT_SECRET}
spring.security.oauth2.client.registration.github.scope=read:user,user:email

spring.security.oauth2.client.provider.github.authorization-uri=https://github.com/login/oauth/authorize
spring.security.oauth2.client.provider.github.token-uri=https://github.com/login/oauth/access_token
spring.security.oauth2.client.provider.github.user-info-uri=https://api.github.com/user
spring.security.oauth2.client.provider.github.user-name-attribute=login


# This tells Flyway to accept an existing schema and create a baseline
spring.flyway.baseline-on-migrate=true

# This tells Flyway which version number to baseline to.
# It should match your first migration script (e.g., V1__Initial_schema.sql)
spring.flyway.baseline-version=1